#include <iostream>
#include <fstream>
#include <time.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <sys/time.h>
// #include <random>

//#include <tgmath.h>
#include <native/task.h>
#include <native/timer.h>

#include <debug.hh>
#include <controller.hh>
#include <shared_memory.hh>
#include <pneumaticarm_model.hh>

using namespace std;
PneumaticarmModel *Joint1modelp = new PneumaticarmModel();
PneumaticarmModel *Joint2modelp = new PneumaticarmModel();
PneumaticarmModel *Joint3modelp = new PneumaticarmModel();


PressureModel *pmodel = new PressureModel();
PressureModel *sim_pmodel = new PressureModel();
////////// Desired trajectory Data //////////

//////// xdes1 //////
double xtraj_des1 [] = {0,0,-2.74545169332877e-18,-7.60582012790815e-18,3.02703364168708e-06,1.43278563196815e-05,4.06851107169043e-05,8.98523487923340e-05,0.000169983761980274,0.000289305100813832,0.000455978012058661,0.000677771689224153,0.000961888007633933,0.00131485245520313,0.00174245730710495,0.00224972224938701,0.00284088410551537,0.00351939619771534,0.00428793746208485,0.00514843820022713,0.00610220077192263,0.00714987617336102,0.00829148665829987,0.00952647168987458,0.0108538112557726,0.0122720735829501,0.0137794661988223,0.0153738818322821,0.0170529311163355,0.0188140585517619,0.0206545172344267,0.0225714102834723,0.0245616915027244,0.0266223311054572,0.0287502304371821,0.0309422666242825,0.0331954184826835,0.0355065552150914,0.0378725915022785,0.0402905398333477,0.0427574773058666,0.0452705534338751,0.0478269675287755,0.0504240164718426,0.0530591189293023,0.0557297735528036,0.0584335745824915,0.0611682102252360,0.0639314528765673,0.0667211197887316,0.0695351269129813,0.0723714333813655,0.0752280589313914,0.0781031242653715,0.0809948846984651,0.0839016851237314,0.0868218733380970,0.0897539089339619,0.0926962920158916,0.0956476086583359,0.0986065213856307,0.101571716743611,0.104541870130852,0.107515668435215,0.110491810551134,0.113469031017406,0.116446097185159,0.119421778739818,0.122394850168624,0.125364092145774,0.128328291923833,0.131286242808349,0.134236764820087,0.137178682446981,0.140110829341959,0.143032072053527,0.145941265207848,0.148837224059092,0.151718652150989,0.154584215429291,0.157432538586330,0.160262232316983,0.163071909623059,0.165860095768165,0.168625311979154,0.171365976271030,0.174080462403662,0.176767167498025,0.179424393327982,0.182050433881868,0.184643508081310,0.187201759400470,0.189723278568305,0.192206222839378,0.194648889108554,0.197049755006087,0.199407560054232,0.201721301598168,0.203990192389055,0.206213677725658,0.208391410712740,0.210523224151216,0.212609104807577,0.214649151586415,0.216643546308762,0.218592488183722,0.220496220778740,0.222354999138666,0.224169061409325,0.225938631204466,0.227663899088200,0.229345017371738,0.230982098309458,0.232575196621473,0.234124194967198,0.235628888459548,0.237089014447461,0.238504297084391,0.239874434832144,0.241199104605836,0.242477955965867,0.243710584948976,0.244896563538476,0.246035437789146,0.247126730533383,0.248169884747317,0.249164343228827,0.250109548433606,0.251004903966649,0.251849822929532,0.252643670692365,0.253385831147230,0.254075722505963,0.254712788756331,0.255296402363533,0.255825837495554,0.256300280817319,0.256718808601012,0.257080375487051,0.257383818333969,0.257627842964297,0.257811036656386,0.257931872472940,0.257988727903335,0.257979870821392,0.257903508962135,0.257757786165890,0.257540784523677,0.257250555155039,0.256885135273504,0.256442558657751,0.255920876770763,0.255318158682438,0.254632505726793,0.253862070248614,0.253005059861050,0.252059752897626,0.251024520415141,0.249897841277785,0.248678297329682,0.247364603432412,0.245955616973314,0.244450354916163,0.242847990913034,0.241147869661187,0.239349502659537,0.237452574146023,0.235456934715765,0.233362593725454,0.231169748738773,0.228878782892330,0.226490245450932,0.224004873955935,0.221423586893162,0.218747477228457,0.215977803113754,0.213115994062886,0.210163645254841,0.207122511542175,0.203994504634419,0.200781673830608,0.197486195894519,0.194110379140136,0.190656671022173,0.187127627730369,0.183525887198247,0.179854203923899,0.176115418762934,0.172312461330304,0.168448341993927,0.164526148740190,0.160549041923739,0.156520245492531,0.152443039083312,0.148320748036319,0.144156732572701,0.139954362479673,0.135717031120956,0.131448147609803,0.127151129248971,0.122829396614845,0.118486374495267,0.114125480619666,0.109750115179247,0.105363662508120,0.100969491363185,0.0965709419339396,0.0921713238631044,0.0877739167532482,0.0833819456363710,0.0789985989691320,0.0746270262470245,0.0702705924810540,0.0659331248037461,0.0616191106647790,0.0573338095738260,0.0530833750966722,0.0488748509032311,0.0447161725199588,0.0406161767999779,0.0365845766506141,0.0326319171002793,0.0287695256619544,0.0250094246526505,0.0213642364818787,0.0178471046467772,0.0144716283122348,0.0112517935455013,0.00820192963372225,0.00533642053503910,0.00266924845741618,0.000213582137891008,-0.00201854123356801,-0.00401639805350660,-0.00577068673992702,-0.00727359778742719,-0.00851885686248546,-0.00950170136353841,-0.0102188248311037,-0.0106682460546283,-0.0108493017085140,-0.0107625228096390,-0.0104095233359703,-0.00979286750593126,-0.00891594572611149,-0.00778284698194282,-0.00639819665791649,-0.00476708013337614,-0.00289497834446336,-0.000787695141208663,0.00154857339639391,0.00410724161729215,0.00688135122095138,0.00986366694751989,0.0130466146418717,0.0164224245485731,0.0199830801426697,0.0237203733667495,0.0276259322450014,0.0316912551503042,0.0359077450240697,0.0402667371389930,0.0447595960752451,0.0493776467495243,0.0541121841218634,0.0589545212633724,0.0638960255697440,0.0689280644182147,0.0740420409516460,0.0792293879134492,0.0844816591719182,0.0897905549129389,0.0951479490367595,0.100545916831536,0.105976796680753,0.111433180689186,0.116908031866437,0.122394702974982,0.127887057114165,0.133379521698218,0.138867160615688,0.144345729426493,0.149811766484686,0.155262720399666,0.160697001743964,0.166114057189525,0.171514430680757,0.176899796576753,0.182272989560462,0.187638014713970,0.192999995084304,0.198365072812901,0.203740270260238,0.209133263449846,0.214552133786266,0.220004990126599,0.225499529716473,0.231042649412043,0.236640041294054,0.242295893409153,0.248012653839529,0.253790974927486,0.259629883401506,0.265527011059690,0.271478929533204,0.277481476902202,0.283530073095378,0.289619966224410,0.295746453413040,0.301905011246972,0.308091389856149,0.314301589794681,0.320531866336175,0.326778734970964,0.333038843405563,0.339308865523721,0.345585452494923,0.351865130661706,0.358144273281568,0.364419032402751,0.370685266020955,0.376938531641607,0.383174088142329,0.389386696255400,0.395570383892484,0.401718259539036,0.407822505540730,0.413874419929336,0.419864515557563,0.425782644884030,0.431618128012011,0.437360028778899,0.442997488901342,0.448519990341165,0.453917528759441,0.459180700096392,0.464300716233948,0.469269435207106,0.474079341108507,0.478723518068092,0.483195618969483,0.487489904119656,0.491601239911845,0.495525079175008,0.499257419982253,0.502794776877491,0.506134133319324,0.509272927484087,0.512209016535473,0.514940633127804,0.517466349280036,0.519785055867998,0.521895918653523,0.523798380717977,0.525492141795870,0.526977141894093,0.528253544336725,0.529321736917293,0.530182329342489,0.530836155318346,0.531284270077432,0.531527972544624,0.531568807592193,0.531408593892681,0.531049453652003,0.530493833405740,0.529744539615150,0.528804759917171,0.527678114589352,0.526368701957703,0.524881137596537,0.523220606893226,0.521392895442649,0.519404382839573,0.517262068025280,0.514973604357422,0.512547339671342,0.509992367010650,0.507318574178334,0.504536685300205,0.501658297234693,0.498695902950972,0.495662895653617,0.492573554968580,0.489443008188592,0.486287186355399,0.483122760414366,0.479967065772188,0.476838017499060,0.473754017701399,0.470733863264332,0.467796643529601,0.464961627633667,0.462248140473744,0.459675419826145,0.457262452826058,0.455027785341302,0.452989297014223,0.451163935658033,0.449567400999725,0.448213770149118,0.447115050392894,0.446280646496501,0.445716725388090,0.445425465306155,0.445404177530072,0.445644282417632,0.446130136592160,0.446837731228801,0.447733295652320,0.448771890100887,0.449896121418393,0.451035224408159,0.452104801292649,0.453007591733153,0.453635687054269,0.453874489129441,0.453608464158739,0.452728313133975,0.451138669288544,0.448765054781038,0.445558741593427,0.441498621449432,0.436589947336366,0.430860501505115,0.424355283521444,0.417130845252518,0.409250114128114,0.400778241687010,0.391779548784528,0.382315510927020,0.372443589245402,0.362216666251212,0.351682900190322,0.340885900145054,0.329865023783668,0.318655741774268,0.307290036676307,0.295796785261702,0.284202120932100,0.272529764793593,0.260801324576302,0.249036530181713,0.237253441299929,0.225468624841724,0.213697308208171,0.201953511888123,0.190250157459378,0.178599164068701,0.167011528914823,0.155497404710882,0.144066163951437,0.132726455949701,0.121486849265032,0.110356938637068,0.0993481204125237,0.0884740358718414,0.0777493953022259,0.0671891548509142,0.0568078627850343,0.0466191837463641,0.0366355669498694,0.0268679780065044,0.0173256929104048,0.00801617477350429,-0.00105500211640862,-0.00988418918397392,-0.0184696037909091,-0.0268113071649370,-0.0349111200543548,-0.0427725085618874,-0.0504003679735350,-0.0578005492756163,-0.0649789167334076,-0.0719398459444820,-0.0786846609856779,-0.0852108856979051,-0.0915125637527723,-0.0975810538526249,-0.103405842360629,-0.108975185027944,-0.114276595266016,-0.119297181140829,-0.124023942866009,-0.128444620327074,-0.132548292713341,-0.136325826178491,-0.139770221030285,-0.142876830907812,-0.145643509285076,-0.148070656506825,-0.150161172439570,-0.151920393519865,-0.153355893160866,-0.154476602552946,-0.155292133218646,-0.155812249918141,-0.156046466492581,-0.156003748498577,-0.155692306181113,-0.155119450980199,-0.154291533101344,-0.153213911692914,-0.151890987453689,-0.150326264664503,-0.148522437240311,-0.146481486106447,-0.144204764929052,-0.141693035427443,-0.138946529477020,-0.135964992958723,-0.132747719342487,-0.129293551104017,-0.125600898851335,-0.121667740652614,-0.117491588755003,-0.113069443047127,-0.108397699086000,-0.103472106744079,-0.0982877436657515,-0.0928390350554458,-0.0871197888800532,-0.0811232637351784,-0.0748423005687974,-0.0682694350310625,-0.0613970860036899,-0.0542177260120824,-0.0467240925201888,-0.0389093923088893,-0.0307675007275750,-0.0222930992248307,-0.0134817953098715,-0.00433019458897611,0.00516406005373184,0.0150023144863083,0.0251849144600111,0.0357112669325371,0.0465798817378488,0.0577883773420289,0.0693335588851250,0.0812114587098768,0.0934172930201209,0.105945463951692,0.118789617729747,0.131942617378099,0.145396550741785,0.159142728954992,0.173171678355802,0.187473140742811,0.202036106527140,0.216848852566302,0.231898979644747,0.247173424509772,0.262658519392635,0.278340047645381,0.294203284250611,0.310233051138541,0.326413752328115,0.342729444309450,0.359163894304681,0.375700626910447,0.392322983728655,0.409014160347543,0.425757234050395,0.442535201523268,0.459331016981015,0.476127642020038,0.492908109295113,0.509655572525896,0.526359664373017,0.543014519475085,0.559616952540440,0.576165056663537,0.592654473860113,0.609078556027740,0.625428491850424,0.641693463193515,0.657860861937641,0.673916453072607,0.689844557830727,0.705628267914269,0.721249660121502,0.736690007098730,0.751929982490440,0.766949893955080,0.781729954948011,0.796249401124986,0.810487085135312,0.824421953704251,0.838033426811545,0.851301698444623,0.864207963873772,0.876734585624914,0.888865206415291,0.900584829460508,0.911879872898789,0.922738203480153,0.933149129905838,0.943103372533945,0.952593019912901,0.961611468478215,0.970153349672711,0.978214459914546,0.985791681831523,0.992882905055883,0.999486948289176,1.00560348252868,1.01123296356502,1.01637656594829,1.02103612111283,1.02521406856371,1.02891341102472,1.03213767638221,1.03489088784617,1.03717753940465,1.03900257542718,1.04037137560740,1.04128975984941,1.04176399710608,1.04180082140365,1.04140745112228,1.04059162282981,1.03936162737036,1.03772635179544,1.03569532704486,1.03327877861481,1.03048766847142,1.02733373781767,1.02382955412890,1.01998856093956,1.01582512810613,1.01135460495948,1.00659336862801,1.00155887194507,0.996269685291764,0.990745534984321,0.985007334652526,0.979077208611171,0.972978507722702,0.966735816915203,0.960374953448842,0.953922956136850,0.947408064744678,0.940859691433990,0.934308380872247,0.927785761309160,0.921324489736581,0.914958187146286,0.908721364782247,0.902649344566198,0.896778169272211,0.891144506019891,0.885785539919653,0.880738854873956,0.876042297761552,0.871733821576191,0.867851299583952,0.864432294659921,0.861513769278398,0.859131704262767,0.857320594798175,0.856112766839542,0.855537443656702,0.855619454541942,0.856377442636907,0.857821372270067,0.859949084687257,0.862741573035762,0.866156604619583,0.870120362211033,0.874517022074274,0.879176850054257,0.883864837134584,0.888274228314715,0.892032130386250,0.894725462505981,0.895950738125405,0.895378120656828,0.892805578105887,0.888178387811306,0.881568656277682,0.873131706875730,0.863061737898096,0.851559575507439,0.838814368566308,0.824995669122543,0.810251627803135,0.794710247221277,0.778481795216654,0.761661459734780,0.744331815089024,0.726564973329918,0.708424365665527,0.689966202414193,0.671240645775345,0.652292775495790,0.633163356456514,0.613889455415148,0.594504933379238,0.575040857152062,0.555525833597215,0.535986298478333,0.516446745827414,0.496929899994501,0.477456890192732,0.458047385964012,0.438719718611442,0.419490986146890,0.400377267749416,0.381393792874541,0.362555444349237,0.343877208850681,0.325374786658235,0.307065268206620,0.288967146951666,0.271100016065565,0.253484150097506,0.236140135796819,0.219088555870897,0.202349695638756,0.185943294089910,0.169871538944273,0.154123585533398,0.138683542304352,0.123532863845738,0.108652263240273,0.0940231924337229,0.0796289242515420,0.0654553210157382,0.0514913118582230,0.0377304915082558,0.0241695451918655,0.0108250170602304,-0.00227116239944061,-0.0150754526797143,-0.0275358981066096,-0.0395948843721721,-0.0511915280814448,-0.0622637808922862,-0.0727502871238508,-0.0825920113666909,-0.0917336538989814,-0.100124839763808,-0.107721076166205,-0.114484461548620,-0.120384224450281,-0.125397038805430,-0.129507094232912,-0.132705500645371,-0.134989946498162,-0.136371494168019,-0.136872651818446,-0.136525417211636,-0.135370473106199,-0.133454944720374,-0.130830407004983,-0.127551266059256,-0.123673468753359,-0.119253654950276,-0.114347865929979,-0.109010630993237,-0.103294333569300,-0.0972487014829542,-0.0909204557121685,-0.0843530912631574,-0.0775867179178583,-0.0706579386963396,-0.0635996496882054,-0.0564408215669023,-0.0492061656781604,-0.0419156745223510,-0.0345840570571418,-0.0272200762345994,-0.0198258050052605,-0.0123958473647003,-0.00491660024360412,0.00263427127995527,0.0102880797490655,0.0180848571397794,0.0260724138150989,0.0343044002278354,0.0428378131528540,0.0517309454202353,0.0610387676474787,0.0708090735514607,0.0810786806450405,0.0918643658265552,0.103166956664905,0.114975380735836,0.127270353685239,0.140027480627983,0.153219685219112,0.166818971158872,0.180797590013107,0.195128844371040,0.209787625155997,0.224750584397961,0.239996247313413,0.255505344258811,0.271260705275219};
/////// xdes2 ////////
double xtraj_des2 [] = {0,0,8.50372460537444e-18,2.37170340270753e-17,-8.08724131669682e-06,-3.81751425192007e-05,-0.000108087844735655,-0.000237976685187972,-0.000448735254643621,-0.000761079098508987,-0.00119515269776782,-0.00176962317784030,-0.00250119519915749,-0.00340430495536588,-0.00449096713142459,-0.00577067012940746,-0.00725035477272853,-0.00893442400194421,-0.0108247782399792,-0.0129208994162313,-0.0152202088284334,-0.0177180279065979,-0.0204076539389569,-0.0232805072146992,-0.0263265127515628,-0.0295342646211648,-0.0328911952440416,-0.0363837297534281,-0.0399974003047082,-0.0437171973140789,-0.0475275327534048,-0.0514123835756438,-0.0553553097959598,-0.0593399480113464,-0.0633498086232804,-0.0673684136800408,-0.0713796714661818,-0.0753673051850967,-0.0793153447759273,-0.0832082894746411,-0.0870310463591282,-0.0907689752670790,-0.0944078376882011,-0.0979339620072026,-0.101334328162138,-0.104596469179541,-0.107708527838146,-0.110659279178486,-0.113438117042214,-0.116034937502327,-0.118440330026433,-0.120645420371107,-0.122641935824411,-0.124422341842563,-0.125979923767885,-0.127308689621241,-0.128403123853781,-0.129258507753437,-0.129870732301983,-0.130236415379586,-0.130352885127677,-0.130218040455295,-0.129830252445659,-0.129188431415116,-0.128292027278657,-0.127141090373427,-0.125736260135415,-0.124078679335257,-0.122169995914548,-0.120012360952167,-0.117608423033961,-0.114961319270479,-0.112074721806015,-0.108952768599548,-0.105600058817654,-0.102021708101291,-0.0982232211872780,-0.0942104065611895,-0.0899891397661286,-0.0855655767036750,-0.0809461285885715,-0.0761375349203209,-0.0711468920244171,-0.0659813712410069,-0.0606484569459812,-0.0551556396398718,-0.0495105819734334,-0.0437212893884862,-0.0377957574947359,-0.0317421928928614,-0.0255688344633579,-0.0192839362108571,-0.0128958121474715,-0.00641312967869011,0.000154915410423180,0.00679852135542318,0.0135070685901604,0.0202691600364478,0.0270727799220684,0.0339052611207113,0.0407533825124650,0.0476034751883537,0.0544415218391560,0.0612532985377588,0.0680244864581499,0.0747408828136873,0.0813883385688710,0.0879528715732383,0.0944207742584491,0.100778619977934,0.107013335537338,0.113112232218453,0.119063028831093,0.124853915310992,0.130473921417271,0.135912674299125,0.141160320068484,0.146207397039760,0.151044883839111,0.155664195936256,0.160057210802497,0.164216357482787,0.168134532092327,0.171805109307022,0.175221940657818,0.178379537366600,0.181272829797245,0.183897171370172,0.186248461199585,0.188323000831592,0.190117670982872,0.191629729779678,0.192856765287294,0.193796721962132,0.194448197318398,0.194810528428537,0.194883762734472,0.194668736520954,0.194167109068276,0.193381354491166,0.192314805884729,0.190971619504192,0.189356762979015,0.187475958969465,0.185335727171598,0.182943232457746,0.180306290148394,0.177433355520190,0.174333423898462,0.171015973561007,0.167490924341290,0.163768568180232,0.159859554979876,0.155774838118654,0.151525608361312,0.147123268712715,0.142579375281965,0.137905557816291,0.133113461746885,0.128214749455673,0.123220995088728,0.118143641430580,0.112993936990707,0.107782926853004,0.102521397219761,0.0972198703117276,0.0918885722986809,0.0865374384298714,0.0811761228907215,0.0758138944012753,0.0704596300345293,0.0651218625004728,0.0598086964932634,0.0545278170795718,0.0492864958501048,0.0440916062315236,0.0389495922329171,0.0338664719203281,0.0288478435276230,0.0238988835379878,0.0190243910302269,0.0142288075587791,0.00951619353545346,0.00489020003284260,0.000354144016511081,-0.00408891700217629,-0.00843629812262580,-0.0126856070561974,-0.0168347630744799,-0.0208819815632719,-0.0248257713385344,-0.0286649259046073,-0.0323985049609468,-0.0360258173379644,-0.0395463996022172,-0.0429599915352937,-0.0462664680032034,-0.0494658864513758,-0.0525584699199424,-0.0555445906386080,-0.0584247605559270,-0.0611996372951837,-0.0638699971382457,-0.0664367070067485,-0.0689007354931723,-0.0712631563271181,-0.0735251151657755,-0.0756878251641292,-0.0777525736024264,-0.0797206510029477,-0.0815934098680762,-0.0833722555628628,-0.0850593274920189,-0.0866581478854145,-0.0881741390295815,-0.0896148885136374,-0.0909904452161455,-0.0923132730542354,-0.0935982118083840,-0.0948624553358480,-0.0961254314266080,-0.0974086311218592,-0.0987354231724700,-0.100130763798255,-0.101620884793844,-0.103233031394511,-0.104995229925771,-0.106936050822832,-0.109084445450962,-0.111468922452527,-0.114116296097680,-0.117050565648632,-0.120292056951317,-0.123856947718640,-0.127757004285330,-0.131999427296468,-0.136586778356508,-0.141517094532415,-0.146784094433552,-0.152377589872618,-0.158283568004768,-0.164484596681922,-0.170960191323938,-0.177687245232560,-0.184640437093327,-0.191792645199558,-0.199115450289147,-0.206579410578775,-0.214154300750577,-0.221809355252516,-0.229513095950186,-0.237233358066120,-0.244937357650156,-0.252591973746107,-0.260163604845760,-0.267618593002890,-0.274923120997452,-0.282043399241563,-0.288945769146809,-0.295596828338646,-0.301963557239516,-0.308013426890108,-0.313714685871636,-0.319036213603525,-0.323947571103776,-0.328419170535905,-0.332422394867189,-0.335929460590382,-0.338913541183519,-0.341348756740717,-0.343210454235252,-0.344475301284907,-0.345121365069671,-0.345128196455305,-0.344477004819644,-0.343150613608716,-0.341133798837494,-0.338413315520769,-0.334978233805383,-0.330820072509081,-0.325932976731149,-0.320313829065645,-0.313962472594210,-0.306882042000333,-0.299079072741157,-0.290563665065384,-0.281349609229531,-0.271454427511440,-0.260899413331954,-0.249709618258261,-0.237913663653515,-0.225543424846932,-0.212633609730888,-0.199221101773063,-0.185344244209882,-0.171041781623648,-0.156351625345424,-0.141309786260563,-0.125949261948232,-0.110299228670787,-0.0943843889553848,-0.0782248522080018,-0.0618366546299903,-0.0452324227848750,-0.0284223225778140,-0.0114149666784575,0.00578173794539767,0.0231599028134237,0.0407110617220422,0.0584258370578846,0.0762937129290709,0.0943031333804251,0.112441517881538,0.130695278828726,0.149050207188374,0.167491808885100,0.186005464155879,0.204576750185094,0.223191542565376,0.241836229806761,0.260497951946230,0.279164637867181,0.297825029808451,0.316469210260477,0.335089221337178,0.353679540629979,0.372237078375127,0.390761036773432,0.409252622394039,0.427714693955027,0.446151410446467,0.464567498824081,0.482967415979522,0.501354686877777,0.519731478271353,0.538098419815634,0.556454607981682,0.574797553680389,0.593123271914396,0.611426385495187,0.629700240448019,0.647936781944976,0.666126546297706,0.684258700220390,0.702321137248157,0.720300536516947,0.738182484820651,0.755951492837490,0.773591077404735,0.791083869371400,0.808411699972123,0.825555637703741,0.842496106036605,0.859212852078522,0.875684994940464,0.891891065077623,0.907809052788106,0.923416403403318,0.938690030469122,0.953606321042599,0.968141166069155,0.982269913830301,0.995967400835264,1.00920790511299,1.02196509983529,1.03421204703547,1.04592115117902,1.05706417470326,1.06761215829755,1.07753537310313,1.08680330768314,1.09538462092572,1.10324718925741,1.11035830432384,1.11668477749287,1.12219302291872,1.12684913145050,1.13061890765956,1.13346790446020,1.13536147062670,1.13626479074983,1.13614293541355,1.13496093622257,1.13268387641081,1.12927702261739,1.12470592887001,1.11893657399622,1.11193550930692,1.10367001533068,1.09410826522566,1.08321946618740,1.07097401650481,1.05734367730830,1.04230175959625,1.02582335049117,1.00788558164952,0.988467959808879,0.967552781910784,0.945125653799085,0.921176144378802,0.895698598369957,0.868693154390458,0.840167009199150,0.810135984916048,0.778626438888228,0.745677558952524,0.711344110897478,0.675699656288228,0.638840195352646,0.600888153184450,0.561996481851800,0.522352509945925,0.482180838961247,0.441744453184407,0.401342951767918,0.361306681066269,0.321985851455878,0.283734432051752,0.246889852572202,0.211751027819747,0.178558344950706,0.147479537182814,0.118604065519916,0.0919464453147909,0.0674569695247786,0.0450367020959369,0.0245535142319125,0.00585675127976179,-0.0112110181222490,-0.0268053627707618,-0.0410743097328721,-0.0541550564567452,-0.0661723943571462,-0.0772383044378264,-0.0874524635744600,-0.0969030856939519,-0.105667947232405,-0.113815504382224,-0.121405958853722,-0.128492267943086,-0.135121067651217,-0.141333503616084,-0.147165886937902,-0.152650271206489,-0.157814945950292,-0.162684863231486,-0.167282006198445,-0.171625692870322,-0.175732847124626,-0.179618224909783,-0.183294635025500,-0.186773122728421,-0.190063133859756,-0.193174225648254,-0.196118985942658,-0.198915041346030,-0.201586159820239,-0.204159057546112,-0.206661161023200,-0.209118835081311,-0.211556095527628,-0.213993722319297,-0.216448551565652,-0.218932938716816,-0.221454466707102,-0.224015783561496,-0.226614549968358,-0.229243657417232,-0.231891349627097,-0.234541523058743,-0.237174105495473,-0.239765703153213,-0.242290927629704,-0.244724939572372,-0.247047430218659,-0.249246708766484,-0.251321602746990,-0.253280517938633,-0.255139245385450,-0.256918729468530,-0.258643295560605,-0.260339285751246,-0.262034112826731,-0.263755401988327,-0.265528391787605,-0.267374046859690,-0.269307601099861,-0.271337392894855,-0.273464092691858,-0.275680164905316,-0.277969632456153,-0.280308134695522,-0.282663038827741,-0.284993983419962,-0.287255556675111,-0.289399414528216,-0.291375967798636,-0.293135723027313,-0.294630319060295,-0.295813300997351,-0.296640709953686,-0.297071428681346,-0.297067428365681,-0.296593818825280,-0.295618807878529,-0.294113586445940,-0.292052167330270,-0.289411246403894,-0.286170211421792,-0.282311053944552,-0.277818323811249,-0.272679102273283,-0.266883059678787,-0.260422457653124,-0.253292191071605,-0.245489927867052,-0.237016281185321,-0.227875121685943,-0.218073727639151,-0.207622884541601,-0.196536850514482,-0.184833272158940,-0.172533002990729,-0.159659731962865,-0.146239679949821,-0.132301065100130,-0.117873629528602,-0.102988043296482,-0.0876753246213353,-0.0719662652346050,-0.0558910370075881,-0.0394788364131119,-0.0227576583193920,-0.00575415412756208,0.0115063247277360,0.0289997373268372,0.0467032190041285,0.0645950093287531,0.0826544937576015,0.100862023354502,0.119198856727771,0.137647340249374,0.156190958367813,0.174814216049203,0.193502775134762,0.212243489153419,0.231024469957064,0.249835178561999,0.268666495785702,0.287510695337779,0.306361408049073,0.325213586420251,0.344063554521853,0.362908915632735,0.381748476358162,0.400582215102535,0.419411212944584,0.438237645963504,0.457064669755543,0.475896340106662,0.494737565059643,0.513594022939675,0.532472134996223,0.551379057634286,0.570322646044925,0.589311419648270,0.608354487195646,0.627461429565338,0.646642225990277,0.665886685805340,0.685169821743610,0.704456937986228,0.723707593732176,0.742887434803963,0.761967934062000,0.780926178837559,0.799744582061891,0.818410442408470,0.836915594752595,0.855256026502358,0.873431398740177,0.891444571178614,0.909301137393008,0.927008971726370,0.944577695567894,0.962018067785171,0.979343677781999,0.996569663609897,1.01371168947448,1.03078513186878,1.04780442504146,1.06478256271090,1.08173072796594,1.09865803498386,1.11557132268819,1.13247498329913,1.14937081516660,1.16625797370037,1.18313297761728,1.19998973769794,1.21681962693343,1.23361158698537,1.25035221862344,1.26702590134271,1.28361491848854,1.30009958459598,1.31645837901449,1.33266805941081,1.34870378245277,1.36453922460897,1.38014667466473,1.39549713059137,1.41056039261226,1.42530514769199,1.43969905905851,1.45370886612971,1.46730049165658,1.48043909401410,1.49308912961683,1.50521441148493,1.51677817657300,1.52774311356541,1.53807140410643,1.54772475898398,1.55666444535688,1.56485131868216,1.57224590699391,1.57880850923031,1.58449928172476,1.58927831399293,1.59310570033874,1.59594158912565,1.59774623651184,1.59848003953380,1.59810357086106,1.59657759600603,1.59386308570881,1.58992121948357,1.58471337941073,1.57820113070886,1.57034619289650,1.56111039804140,1.55045563786862,1.53834379322388,1.52473665621525,1.50959584144077,1.49288267090366,1.47455805464756,1.45458236498487,1.43291529208875,1.40951570409483,1.38434149682699,1.35734944889802,1.32849509401344,1.29773262380932,1.26501483403367,1.23029314122862,1.19351770974620,1.15463774175698,1.11360201458599,1.07035975574742,1.02486202166233,0.977063780567033,0.926927015125390,0.874425262105351,0.819550182401223,0.762320900482383,0.702797120588323,0.641097167149184,0.577422015003184,0.512085717383062,0.445550763178507,0.378462749408195,0.311671929631151,0.246220776224832,0.183273201652115,0.123974548413491,0.0692691804417876,0.0197452049926347,-0.0244220058886450,-0.0634118115699511,-0.0976342749341426,-0.127604509212170,-0.153852002870055,-0.176869896680560,-0.197093773739335,-0.214897622924617,-0.230598242895081,-0.244462697700915,-0.256716265915605,-0.267549708734548,-0.277125542185991,-0.285583186021621,-0.293043148669767,-0.299610359589600,-0.305376894580958,-0.310424120842230,-0.314824403082771,-0.318642444984869,-0.321936401467248,-0.324758766745421,-0.327157134298725,-0.329174784727808,-0.330851109840495,-0.332222049866074,-0.333320417233286,-0.334176182347155,-0.334816705596930,-0.335267262343205,-0.335551454245736,-0.335692470351095,-0.335714209601539,-0.335642810292583,-0.335508337139429,-0.335344735414277,-0.335188968166347,-0.335079845667562,-0.335056981027469,-0.335159886797127,-0.335427127668088,-0.335895592947003,-0.336547190602154,-0.337321666302829,-0.338138368154643,-0.338903499738087,-0.339516072903303,-0.339872676353567,-0.339871143235692,-0.339413337880038,-0.338407122185571,-0.336771891065261,-0.334434283765058,-0.331381352081998,-0.327648316368990,-0.323308095864889,-0.318462315808690,-0.313233416560872,-0.307757691662429,-0.302179040679611,-0.296643361113236,-0.291293550149919,-0.286265091962716,-0.281682296024733,-0.277655209912113,-0.274277271079393,-0.271623462031001,-0.269749137592697,-0.268689596261072,-0.268461714735237,-0.269064809539202,-0.270459205713672,-0.272571582638387,-0.275300493692141,-0.278518366122655,-0.282078031368303,-0.285818604031311,-0.289570315916398,-0.293158436490360,-0.296405915146236,-0.299137485937989,-0.301182692732362,-0.302378113806028,-0.302569244725469,-0.301611906297903,-0.299373247869794,-0.295732528745925,-0.290581742036235,-0.283826404725717,-0.275386344115655,-0.265196739586856,-0.253209464150917,-0.239394655495527,-0.223742509359393,-0.206265245216725,-0.186999131313809,-0.166006357905240,-0.143376280991826,-0.119225865350420,-0.0936987022828513,-0.0669621200002395,-0.0392015425465143,-0.0106132934750117,0.0186014274485002,0.0482494349657339,0.0781562846111903,0.108176659509085,0.138218537200471,0.168231774248874,0.198196831615903,0.228114556766671,0.257997665460623,0.287864155414984,0.317732625256539,0.347619275829982,0.377535899756615,0.407488554459713,0.437477248163056,0.467495711043124,0.497530360879489,0.527560513277671};
////////// Control Open Loop Data ///////////
unsigned int sz = 800;

 ///// uhat 1 ///////////////////
 double  uhat1 [] = {0.580366912345394,0.609432377896918,0.633896208114870,0.656030757401587,0.655537493220711,0.673826614927790,0.714392773065736,0.714553100886362,0.727216243389087,0.744463597729202,0.761407939716172,0.778032178479208,0.795204760202793,0.810251936906668,0.825813267348652,0.841484556111392,0.865624343020286,0.870098494780350,0.884004100735042,0.897453535398161,0.912972602967344,0.922917070643919,0.934898038352247,0.946356596667011,0.957276518412329,0.977404204552231,0.977436359016583,0.986644681053958,0.995251200930359,1.01942646286423,1.01059792331401,1.02545283014528,1.04841630202764,1.02873015324686,1.03341344132720,1.04646477425680,1.04133871644151,1.04318943016455,1.04498002095106,1.04601572360120,1.05105000784867,1.04577502154763,1.04887244843256,1.04237641522442,1.03946630459501,1.04084057218793,1.03117513886578,1.02577574282713,1.01952904973364,1.01242711865533,1.02259335190869,1.00130653140728,0.985918323378959,0.986638955577295,0.963847905536250,0.966318831752133,0.951288189065179,0.928817944968256,0.908980329556414,0.893400073953002,0.876133369031312,0.863555233492081,0.845579912963634,0.820065855156693,0.799565331458468,0.778161636201630,0.755857326298478,0.732655674145038,0.714017470237746,0.685787127981526,0.666088575372850,0.645762347004210,0.608742671737206,0.574877018564913,0.545547359879690,0.515373211466550,0.485047176721974,0.452532357025158,0.426188480869172,0.388860553837339,0.358404361748104,0.317210468552177,0.281449528078498,0.260413791676970,0.209704698584960,0.192855280831107,0.131149315321711,0.0918475128738943,0.0577716825595267,0.0564622828119655,0.0480191838759098,0.0442377117953962,0.0390847305560497,0.0325780995472123,0.0287198802378068,0.0217688282991830,0.0180805142596687,0.0150169643755887,0.0136620468179052,0.00872132605092248,0.00979510690529359,0.00298651312944185,0.00351071125426131,0,0.00191412960527871,0,0,0,0.00234484894649349,0,0,0,0,0,0.000753411714543668,0.00147544269834699,0.00118648766233892,0.00175222945551015,0.000630676814446779,0,0.000263877601464967,0.00109062918283146,0,0,0,0.00163634235742372,0,0,0.00142699983855243,0.00281015990879077,0.000129109021382088,0,0,0.00303473062569178,0,0,0,0,0,0.000584605930876799,0,0.00179313295316757,0,0,0,0.00153944127344162,0.000525360349333801,0.00353558824058419,0,0,0.00129859114119465,0.000404860331789658,0,0,0.000701679628560335,0,0.000102957572638327,0,0.00265945766605536,0.000241310748856538,0.00243903828142230,0,0.000291507154917746,0,0,0,0.000182098672021912,0.00116354788551313,0,0,0,0,0.000562916295812962,0,0.000348912469032275,0.00173320955689900,0,0,0,0.00432281172372425,0,0.000756732684754282,0.00297425751826578,0.00141165981023101,0,0,0.00124247935347265,0.00222900024940275,0.00245095360542709,0.00321491019768054,0.00253522185062416,0.00183474502207513,0,0.000872892656718769,0.000484877199648900,0,0,0.00142818225316859,0.000285390745631261,0.000664384031559836,0,0.00115511301211624,0,0.00127084347797475,0.000787747594453113,0.000262184082212112,9.83053132648491e-05,0.00295746467838764,0.0610073972435820,0.134990710273911,0.211968662092597,0.291785771580165,0.380458157647164,0.454069554517503,0.536982063655044,0.627836493326417,0.719492252340583,0.811891345344624,0.906639539316564,0.998681230883181,1.09294982791735,1.18894174971856,1.29348816979693,1.39911291797629,1.51029098350328,1.58059552597011,1.60304897487738,1.61508745994985,1.62628518169007,1.64342996318782,1.66076687410310,1.67701582375837,1.68951986526718,1.70556254105409,1.72241910899670,1.74978756884153,1.75408017047758,1.77034518379289,1.78663724075795,1.80368874852697,1.81925511341658,1.83692865868278,1.86375691043275,1.87627915293234,1.88762245655946,1.90760865063626,1.91649537781075,1.93247972910423,1.94836586502643,1.97732902106271,1.97979025659689,2.01077589639675,2.01066106935676,2.02585489570123,2.04086939616871,2.05569077689394,2.07030518841833,2.08469873635443,2.11682230908655,2.11276748562479,2.12641474919789,2.13978529246191,2.15921926957209,2.16564028506761,2.17809681066945,2.19022077868850,2.20719744487742,2.21341554176628,2.22687227485503,2.23511412826414,2.24758630066797,2.25520720872743,2.26461790624121,2.27358690504878,2.28258809741250,2.28565341987345,2.29078012985116,2.29925650725965,2.30480515851581,2.31127829376611,2.30859097377270,2.31233284831462,2.31577600849394,2.31891346140451,2.32173833787806,2.32529910588955,2.32642354575563,2.32827082093368,2.33254146315314,2.33094320264134,2.34138251812343,2.33423743586250,2.33230672186164,2.33203321216842,2.33138679609763,2.33302823121539,2.33864493859887,2.32839914079296,2.32115433937448,2.31266433947840,2.30540897039333,2.29743387227660,2.30374669094397,2.27930654436783,2.26914659783881,2.25825151085979,2.25417003982127,2.23424624173454,2.22113258249961,2.22003648006498,2.19267869430175,2.17733836019719,2.16125665840827,2.14443498986301,2.13093228315357,2.10858031939551,2.08955309578265,2.06979746911897,2.05995228473536,1.93512953640306,1.75689486491434,1.53427916308832,1.33835283477194,1.12357892504522,0.912462947159480,0.697646063981388,0.479237982700503,0.342410683470526,0.315066830088593,0.287495468172276,0.258484199281900,0.238008122076576,0.199455549225946,0.169056348312178,0.138085647067427,0.115224629461662,0.0991143866342599,0.0782725683518137,0.0625419383087681,0.0462465131448689,0.0227386365206344,0.00726415949947294,0,0,0,0,0.000562314483231437,0.000538388525318553,0.000405184432475539,0,0.000594896353006038,0,0,0.00113111201767783,0.000494961387884552,0,0.00147143757208057,0,0.000129068133997827,0.00236807930242912,0.00210852945438689,0,0,0.00149984800298573,0.000554102525717185,0.000263808003207359,4.34393780806945e-05,0,0.00266911057247505,0,0.00100687890243318,0,0,0,0,0.00346353766812788,0,0.000176522585280019,0.000912255659114626,2.79239860169610e-05,0,0,0,0.00318777254947369,0.00153240200342629,0.00113903824843817,0.000263645537619574,0.00365237639821312,0,0.000796946160636446,0.000537781598948932,0,0,0,0,0,0,0,0,0.00303924417549244,0.00108300091401037,0.000174288459335957,0.00182381379915161,0,0,0,0,0.00111980212034195,0,0.00378239264935761,0,0.000441691560619693,0.000241587060805654,0,0.00191043564797959,3.71149939517302e-06,0.00229306397200775,0,0,0,0,0,0.00198896191982352,0.00109678464538975,0.00246090438141464,0.00471682638322643,0.000492179755507255,0.00361841208791739,0,0.000480277840239462,0.00287396062067075,0.00337736593200552,0,0,0,0,0,0.00390694987389062,0.00106570710744062,0.000492970484591714,0,0.000192094386172073,0.00182125308798188,0,0,0,0,0,0,0.205605184701470,0.640301849640420,1.08873679755704,1.53221061271788,1.49176027473685,1.49103748812598,1.49103748812598,1.50665279211396,1.53269020413048,1.55643519281273,1.58381472187953,1.61146573825038,1.64895276863832,1.69587403322315,1.77252142278797,1.84251360773233,1.92627731583942,2.01044842626481,2.08511181730468,2.13975149326263,2.18430368486547,2.23459182386514,2.28530156873912,2.33640212280261,2.38786198119564,2.44629442995185,2.49290596609892,2.54407190528719,2.59723595205499,2.65123918086596,2.70513516132868,2.75535073909611,2.80846902020025,2.86553805311575,2.91480401598043,2.94913558749477,2.96255098545529,2.97592835133466,2.98925713457401,3.00252666372160,3.01648238850672,3.03429947601212,3.04190421548248,3.05587624111765,3.06862343343576,3.08028825413930,3.09283538342336,3.10523430889868,3.11747356850213,3.12954164850794,3.14233001630320,3.15005439508687,3.15065551913256,3.15086311289476,3.15175341058107,3.15032872957278,3.15005439508687,3.15045857912603,3.15118214454965,3.15419029105522,3.15007024127966,3.15274624922346,3.15176878771605,3.15199416688973,3.15005439508687,3.15020397241606,3.15266989380170,3.15005439508687,3.15005439508687,3.15089763695616,3.15085793710821,3.15005439508687,3.15075853959014,3.15094374511281,3.15005439508687,3.15005439508687,3.15133519595010,3.15051047297056,3.15005439508687,3.15005439508687,3.15005439508687,3.15071442409886,3.15005439508687,3.15052227567550,3.15007934515896,3.15005439508687,3.15005439508687,3.15568561946999,3.15089633767606,3.15005439508687,3.15230726161109,3.15005439508687,3.15005439508687,3.15005439508687,3.15005439508687,3.15025433189357,3.15005439508687,3.15119960473136,3.15005439508687,3.15005439508687,3.15005439508687,3.15163681402769,3.15040580513247,3.15254222614897,3.15281979758407,3.15318904988242,3.15312730803841,3.15005439508687,3.15102061578544,3.14231610761998,3.12588350973842,3.10884747130081,3.09230346302119,3.07298062325698,3.05560839876943,3.04070014233700,3.01476498847561,2.99640643571849,2.97307858130969,2.95208338852683,2.92915632163076,2.90630892506346,2.82221800072192,2.72903069508256,2.65361695170815,2.50360417575332,2.35801580904577,2.20622445696320,2.05358388088232,1.89826819994671,1.74024600238211,1.60245457087795,1.53705615021715,0,0,0.000490756131439424,0,0,0.000162974814950930,0.000384903785495072,0,0,0,0.00179786940556262,0,0.000811719399117611,0.00143455449922896,8.84741267349091e-05,0,0.000765289244072314,0,0,0,0,0.00372739952552804,0.00397631991280362,0,0.000833291625837029,0.000268966950062756,0,0,0.00128111231285885,0.00137278157190382,0,0.000569026524202991,0.00280370297707098,0.00644159173335928,0.00303211307639144,0,0,0.000987551095489859,0,0.00380335999437391,0,0.00203351934282759,0.00177796119198749,0,0,0.00263333115239950,0.00112038887278845,0,0,0.000608194455944773,0.00234041268871632,0,0.000792189039723408,0,0,0.000323416568015569,0,0.00223049580348183,0,0,0,0,0,0,0,0,0.000165304322377559,6.13824881240400e-05,0,3.18233149866444e-05,0.00365276354263414,0,0.00391361116162776,0.00222899330172238,0.00143635561651336,0,0,0,0,0.00262996308960879,0,0.000920631544265799,0.000399865902039092,0,0.00357256180339733,0,0.00104478534384626,0.00118851689628277,0,0,0,0.000307685581246587,0.000665508875054293,0.00136886369807358,0,0.000334861464126300,0.000400325446611005,0,0,0,0.000301471709902291,0,0,0.00114987532281887,4.61672203758184e-05,0.00311127930702541,0,0,0,0.00145983139945675,0.00151591198033948,0,0.00159228664665677,0,0.000119814172094781,0.00209378883003430,0.00406924314639124,0.000456580565989949,0,0,0.00123932758683762,0.0114879759461838,0.0768195617136552,0.128015434594595,0.370859991832154,0.620095883189598,0.975813199000524,1.41110307017603,1.60310132176663,1.65901690696089,1.65901690696089,1.65918044232088,1.66037062725540,1.65901690696089,1.65901690696089,1.65901690696089,1.65901690696089,3.15167127964433,3.15005439508687,3.15005439508687,3.15212397077286,3.15005439508687,3.15267296967442,3.15005439508687,3.15228056253936,3.15688029053911,3.15141659986258,3.15005439508687,3.15043319705311,3.15357546746366,3.15345795045171,3.15177052585370,3.15174181078615,3.15005439508687,3.15101887003798,3.15159017188003,3.15022574763831,3.15007717700711,3.15005439508687,3.15005439508687,3.15005439508687,3.15005439508687,3.15072686338106,3.15193604845273,3.15271978139283,3.15264694172883,3.15005439508687,3.15270886886669,3.15106832171859,3.15005439508687,3.15024658086293,3.15116539351239,3.15005439508687,3.15005439508687,3.15005439508687,3.15005439508687,3.15005439508687,3.15192753322234,3.15005439508687,3.15172082774907,3.15017656646764,3.15393499019662,3.15005439508687,3.15148062949869,3.15126068736729,3.15218430063475,3.15005439508687,3.15048302140485,3.15005439508687,3.15257520246683,3.15149994227405,3.15353341726753,3.15005439508687,3.12847605127434,3.04056685996048,2.95468483731922,3.02904388411692,2.68140108478201,2.36261149869997,1.86718056562086,0.00232160955247297,0,0,0,0,0,0,0,0.000918739377325910,0,0.00115424248398698,0.00182852369898565,0,0.000190395252491856,0.00161971856037836,0.000171439757403329,0,0.00398136255300859};

     double uhat2 [] = {0,0,0,0.000377926665764783,0.00150204983321533,0.000725001845386027,0,0.00142996764773816,0.00391690627727497,0.00970857835542882,0.0126440638958557,0.0181525836635966,0.0239709934536891,0.0298572532541043,0.0387246072695444,0.0480559395835714,0.0485733808910877,0.0553699977141815,0.0692919910617649,0.0806317073889020,0.0780479768944741,0.0825384703518648,0.0895991024393979,0.0976929202395161,0.108866817186036,0.112758367217862,0.120897951815747,0.129066505555340,0.146212171180184,0.145467533381530,0.155465536221425,0.170712748596415,0.174867956321823,0.201545135085653,0.186564834314030,0.196506619111540,0.202971070638704,0.211040262597210,0.226688343592389,0.227173852699629,0.235165807468631,0.246001481627389,0.256000281716843,0.258761506509360,0.268122065519768,0.290534284089960,0.281643458994754,0.300692308215836,0.305692832701172,0.303624905286339,0.319322752056289,0.317752286719969,0.336269467198824,0.331206789517735,0.337747221482821,0.348042551120121,0.350353092128321,0.356404608659029,0.365357086118980,0.367970190248323,0.373470507368403,0.378773409461249,0.383872129342428,0.388759951853943,0.393430219115280,0.397876335789789,0.402091774400772,0.406070080727015,0.409804879230844,0.413289878535865,0.420312860101039,0.421867480381489,0.422184546484148,0.424609313203846,0.444361439491303,0.433733926499784,0.437076410476580,0.431454340001255,0.432424700926723,0.447256691506966,0.433439909608557,0.447640714061312,0.436371185670452,0.432690291179093,0.441295079892405,0.439908917899098,0.428798796829350,0.426893647950589,0.424482636364977,0.426611284177895,0.423948520738736,0.425918241413370,0.411752146157298,0.407675238173236,0.411692135608051,0.398431409602494,0.393260613595597,0.387721724214628,0.381813426246712,0.375534664448765,0.371658129136409,0.369666738397360,0.354469016530085,0.346703179936478,0.343273699453695,0.330057003963795,0.322358342639616,0.311930224674665,0.302314728143251,0.292333422494680,0.309553457014899,0.286117122279472,0.270436559578098,0.248796009759355,0.238618310533033,0.224900726838811,0.212433789436369,0.206259699031819,0.186482470114996,0.173007487719181,0.159206413787480,0.161210333079245,0.130648251614583,0.115903081534672,0.111193540949193,0.0878430105845351,0.0861872878471126,0.0574911644609965,0.0382380443571711,0.0239173888590757,0.0304871394049775,0.0277918842251232,0.0178055061744304,0.0191325815430218,0.0151256691126431,0.0112966729957288,0.0128389438505372,0.00965370844250687,0.00897152075717318,0.00586282219696014,0.0104396800225294,0.00231858497215379,0.00320406171174909,0.00538803523484600,0.00113469460196608,0.000733578047839147,0,0,0,0,0,0.00171740483664354,0.00160916450051853,0,0,0.00361271947628879,4.62567006418182e-05,0,0,0.000120107518581351,0,0,0,0.00219699957935801,0.00535931811946874,0,0.000470177067379377,0.00558171161553886,0,0.000654453599478539,0.00119505865627715,0.00245398530505679,0.000700870094863912,0,0,0,0.000992812855064360,0.00206060270313354,0,0,0.000590297829490868,0.00622280906868434,0,0.00302022593147844,0,0,0,0,0,0.000381769055766446,0,0,0.00268152849586673,0,0,0,0,0,0,0.00172999625008847,0,0,0.000523614725661265,0.00149423709998726,0,0.00411243261091098,0,0.00245888412282953,0.00205138416624164,0.00295396417856564,0,0.00368496017299332,0.00216151840694976,0,0.000121759065493804,0,0.000955773513412372,0.00104527249438024,0,0,0.00179975001942860,0,0.00208260262160658,0.00255824329665595,0,0.00240308957118615,0,0,0.00244457002561956,0.00204344290185152,0,0,0.000434401061257956,0,0,0,0.00223377575104435,0,0.00190628245476701,0.00105611564628870,0,0,0.000680614405350110,0,0.00104166573096529,0.0109265469267442,0.0432998099357985,0.0761085109199101,0.110192515531921,0.142948814510604,0.182877822501436,0.211274995760160,0.247618709085204,0.281029107859933,0.320748068105693,0.359161299928468,0.397248937963084,0.436514580157633,0.476195606341664,0.515672007814124,0.560564372043396,0.595480152249320,0.638927996939280,0.693917802742186,0.736362804654690,0.791366510094336,0.826651006379069,0.866845414395264,0.916457307687075,0.963033674591394,1.00691121485162,1.06808435876869,1.09991394051293,1.15869076081180,1.19231986481433,1.23822000618802,1.28387624183502,1.33953785804860,1.38432780910992,1.41906569965383,1.46343043811886,1.50739313682691,1.55145627957016,1.59834560841675,1.63994710312636,1.67858266983931,1.72005227870445,1.76176175746226,1.80116571026126,1.84074127102381,1.87961628713074,1.91775515473218,1.96471818293025,1.99666612734866,2.03386099510706,2.06221306996170,2.10220619780789,2.11931228829222,2.11842718513404,2.12525943283835,2.12536885238756,2.13089760704440,2.14716481939030,2.14437298711866,2.14676637531564,2.15371398585111,2.16056302511378,2.16923482730006,2.17015012146898,2.17048745732054,2.17477234512770,2.18510156431829,2.18283826201456,2.19278969752112,2.19090217017000,2.19359485160707,2.20519766458189,2.20514644452501,2.21099816935414,2.20520387450034,2.20758281519425,2.20974214843667,2.21339199379418,2.21338208940875,2.21485298704132,2.21608487332560,2.22023049639428,2.21781343098475,2.22858562594445,2.22518971086276,2.21850353850986,2.22204829798346,2.22627798308964,2.21681492290546,2.21570662091491,2.21432013373191,2.21265258817898,2.16773068431769,2.12813072193191,2.08642057841532,2.04534507313513,1.99675702231372,1.95732513254635,1.89893758877537,1.84704035671642,1.79835095755049,1.74590108500507,1.68305027204626,1.63575946239250,1.55897956004201,1.49589897841454,1.43108155843457,1.36925888902502,1.29638767921113,1.22658729122895,1.15520193261131,1.09090859262605,1.00782711247697,0.943601128963536,0.860833155864016,0.775810704311892,0.700287740177048,0.614251832860244,0.545315426964029,0.450315226897561,0.362287502280619,0.284420377837347,0.197821506316076,0.141334441379797,0.138822584919248,0.121653863582779,0.107264161917736,0.0980438442021675,0.0833511440103353,0.0710496062311296,0.0639790957546473,0.0536273209839021,0.0427872235162737,0.0345397249978530,0.0254477618132022,0.0242241247880358,0.0101479135869075,0.00375994910481793,0,0,0.00326814447847319,0,0,0.000930925024260726,0,0.000929463828110480,0.000564565790857202,0,0.000167754176324087,0,0.000759906246704988,0,0,0,0.00217652925519343,0.00259823116474698,0,0,0.00115250534628452,0,0,0,0.00460025939224470,0.00127197512266920,0,0.000446106441031068,0,0,0.000251816257280398,0.00127015039143077,0.00149324497316004,0,0.00151216774676097,0.00397063038141435,0,0.000294898146229789,0,0,0.00345812223794814,0,0.00206533555879951,0,0,6.24269470244596e-05,0.00470190143596009,0,0,0,0,0.00175554837608779,0.00212533479460125,0.00108754516076074,0.000288872083410890,0,0,0,0,0.000560542891915932,0,0,0.000814522320150621,0,0,0,0,0,0.000182505143920496,0,0,0,0,0.00137721676931185,0,0,0.00350296316111468,0,0,0.00214583811518171,0.00117774623867528,0.00263186453332825,0,0,0.00140648874741606,0,0,0.000621312934253152,0.00283878631487688,0.00185713737290898,0.000959618496238793,0,0,0.000424783725816792,0.00353197511852488,0,0.00834122891790087,0.184652204149735,0.359264560987481,0.545683831767625,0.745413865620213,0.943220123714804,1.14392923824784,1.34706821624506,1.54826051502848,1.76306466606331,1.95744124914776,1.97052596856112,1.98300196130253,1.99884116645520,2.01258275647602,2.02532982958530,2.03908950682293,2.05076946834149,2.06908613837457,2.08603878927322,2.11324054098306,2.14250580142253,2.17356492603688,2.21006987474935,2.24826357171435,2.27531820874920,2.31285797492676,2.35065131878459,2.39021674708914,2.42693495497031,2.46539453888251,2.50742095137568,2.53989197883987,2.56927109414484,2.58229342357838,2.60365033298884,2.62509599496525,2.64705742650430,2.66820754527554,2.68985040717665,2.71785757813099,2.73325249849114,2.75975296517787,2.77673181430685,2.79847074244970,2.82019300114853,2.84611103618726,2.86353753334210,2.88562487265771,2.90747721389889,2.93145796670739,2.94945870957159,2.97390944512414,2.99181033761965,3.01278080074174,3.04184921121529,3.05422865553103,3.07518385160126,3.10223356582660,3.12440979793587,3.13464955757004,3.15648588184879,3.17331048021553,3.19217973633065,3.21395030564349,3.23634251389768,3.25189459222235,3.26751984952599,3.28099002309324,3.30381066962798,3.31560956417866,3.32895984244560,3.34390924874586,3.35829427567636,3.37771256578778,3.38681296038340,3.39779670921974,3.40965821803752,3.42082305430359,3.43126530498949,3.44095989041049,3.44988224459825,3.46200443806878,3.46905154595875,3.47184879510348,3.48155365138696,0.125576970388647,0,0,0,1.62803044892308,1.63014263423139,1.62688715468876,1.62852067462074,1.62838305548459,1.61792952292794,1.61866545417953,1.60706216330115,1.60015110978812,1.59634569142400,1.59428996619405,1.57895852016803,1.56266846454298,1.55084958600791,1.53978454950498,1.52893275983695,1.51605575577609,1.49764228030679,1.48007153696268,1.46293996214791,1.44779081018968,1.42240317622907,1.38330177230897,1.32857657366682,1.28194432644209,1.23747602687525,1.18713369932197,1.13902225629630,1.09572615524661,1.04152303075989,0.992177080803942,0.942454617796163,0.892366427396787,0.844725316288824,0.791116873970259,0.740802412163830,0.692514039484387,0.636555729025769,0.584294783732178,0.533552586311525,0.482572396278659,0.437289918278076,0.400764465326620,0.372863222813977,0.326444885587164,0.287180758410512,0.249449042094383,0.218310024417000,0.172130770161143,0.133419267627862,0.0940805982113122,0.0515962187990571,0.0125437488035730,3.99446834404268e-05,0,0,0,0.00303653347102366,0,0.00287854360581094,0,0.00207446610500954,0,0,4.00297281222391e-05,0.000666743109062453,0,0.000402831428629514,0.000466890343645652,0.00119426165259171,0,0.00107273260347127,0.00369418434128249,4.74914362583564e-05,0,0.00217229662660531,0,0.00254987860504314,0.00120006331786320,0,0,0.00131005895614233,0.00146757603334256,0.00147779789913781,0,0,0.00181749719896633,0.000828476037367404,0.00163475274578845,4.18784861665187e-05,0,0,0.00425875897827850,0.00134533981323753,0,0,0,0.000193827455550318,0.00152176240171862,0,0,0,0,0.000112666319879355,0,0,0.00181747376027846,0.00134890944584807,0.00276461679656239,0,0,0.000328685866758227,0,0.00405005993152910,0,0,0,0.00144084233403777,0,0,0,0.00255229359005478,0.000193626412481675,0,0,0.00314780407775400,0.00230638817122765,0.00271803010060737,0,0,0.00336129960218417,0,0.000339828592778748,0,0.00462167887760295,0.00367723060963187,0,0.00144295996100514,0.00161038942236284,0,0,0.00328849428210629,0.00196208037756656,0.00284435576917391,0.00264114536237814,0,0,0,5,5,5,5,5,5,5,5,5,4.60348975400781,5,0,0,0.000207906035653580,0.000236663721256578,0.00163632831310221,0,0.00139595465566743,0.000813222514486308,0.00117173670529662,0.00248574509014890,0.00115351314770108,0.00209506672788458,0.00223755853658819,0.0235634947423417,0.0549210559547668,0.0878849639587941,0,0,2.00027425274713,2.21538920167481,2.42261372372683,2.93407520915387,3.09383654670356,3.24367429996674,3.41067255293091,3.58689223869796,3.80774710834404,3.84792716347126,3.89088471222200,3.92950595176132,3.93819416436689,3.93999421674123,3.93756799385858,3.93756799385858,3.94017927525552,3.93756799385858,3.93774837183144,3.94041997809173,3.93756799385858,3.93880362678430,3.93882961024748,3.94144271565747,3.94026017593521,3.93756799385858,3.93947707110156,3.93756799385858,3.93790985222523,3.93756799385858,3.93905495161001,3.94394694174291,3.93929919025595,3.93756799385858,3.94007526527639,3.94049023330034,3.93756799385858,3.93756799385858,3.93840213432440,3.93756799385858,3.93776719888743,3.93756799385858,3.93756799385858,3.93822323410793,3.90318842863933,3.81436524381295,3.72402733698412,3.56280215440764,3.21966936125843,2.90234896782797,2.44677330073569,1.61949920920177,0,0.00332124631606806};  //uhat2:Delp_ballthrowing_07_03_2016

/*};
 // Delp_optimallift_4sec uhat 2*/

//Delp_maxend_Vel uhat2
///////////////////////////
//
//// uhat3 ////////////////
double uhat3 [] = {
0.48573,0.66904,0.89484,1.1896,1.3468,1.5689,1.8493,2.0606,2.2642,2.499,2.8393,2.9943,3.2379,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.4552,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4329,3.4302,3.4125,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.4077,3.1447,1.8655,0.56155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02544};
//////////////////////////
//
//// uhat4 ///////////////
double uhat4 [] = {
0.028464,0.032386,0.036725,0.041519,0.046811,0.052649,0.059081,0.066164,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.067088,0.071959,0.078462,0.085426,0.092846,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.092277,0.36824,0.86706,1.3769,1.9217,2.5285,2.9647,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.0278,2.3202,1.7845,1.1489,0.66593,0.21829,0,0};
///////////////////////////



///////////////////////////////////////////
// Joint 1 parameters
// Joint 2 parameters
double j2lo = 0.23;
double j2alphao = 20*PI/180;
double j2k = 1.1;
double j2ro = 0.012;
double j2R = 0.009;
double j2m = 5.20;
double j2link_l = 0.67;
double j2fv = 3.0;
double j2Pmax = 3.0e5;
// Joint 3 parameters
double j3lo = 0.185;
double j3alphao = 20*PI/180;
double j3k = 1.25;
double j3ro = 0.0085;
double j3R = 0.015;
double j3m = 2.6;
double j3link_l = 0.32;
double j3fv = 0.25;

void principale_controller_function(void *arg)
{
  Controller * aController = static_cast<Controller *> (arg);
  if (aController!=0)
  {
    cout << " Controller object is created" << endl;
    aController->ApplyControlLaw();
  }
}


Controller::Controller()
{
  positions_.resize(7);
  velocity_.resize(7);
  acceleration_.resize(7);
  position_store_.resize(4);
  xstate_.resize(3);
  state_mpc_.resize(4);
  simulated_positions_.resize(7);
  controls_.resize(16);
  simulated_controls_.resize(16);
  apply_controls_.resize(16);
  user_controls_.resize(16);
  initconfig_controls_.resize(16);
  simulated_initconfig_controls_.resize(16);
  JOINT_NUM_.resize(7);
  mean_pressure_.resize(7);
  delta.resize(7);
  error_now_.resize(7);
  error_derivative_.resize(7);
  error_prev_.resize(7);
  simulated_delta_.resize(7);
  simulated_error_now_.resize(7);
  simulated_error_derivative_.resize(7);
  simulated_error_prev_.resize(7);

  loop_reference_traj_.resize(7);
  ref_init_.resize(7);
  ref_final_.resize(7);
  ref_traj_.resize(7);
  ref_vel_.resize(7);
  ref_acl_.resize(7);
  ref_jerk_.resize(7);
  ref_jerkdot_.resize(7);
  reference_.resize(5);
  reference_mpc_.resize(4);
  ref_slope_.resize(7);
  ref_type_.resize(7);
  desired_position_.resize(7);
  reset_control_ = false;



  /** \ Pid controller parameter intialization  */
  Pid_factor_.resize(7);
  P_.resize(7);
  D_.resize(7);

  //Here parameters are inititalized to test jont num 4 the elbow joint 
  // Elbow
  P_[3] = 0.0005;
  D_[3] = 0.000;
  Pid_factor_[3] = 1;
  ref_init_[3] = 0;
  desired_position_[3] = 45;
  ref_slope_[3] = 15;
  ref_type_[3] = 0;
  ref_traj_[3] = 0;
 // Joint 2
  P_[1] = 0.0005;
  D_[1] = 0.000;
  Pid_factor_[1] = 1;
  ref_init_[1] = 0;
  desired_position_[1] = 40;
  ref_slope_[1] = 10;
  ref_type_[1] = 0;
  ref_traj_[1] = 0;
// Arm rotation
  P_[2] = 0.0005;
  D_[2] = 0;
  Pid_factor_[2] = 1;
  ref_init_[2] = 0;
  desired_position_[2] = 50;
  ref_slope_[2] = 4;
  ref_type_[2] = 0;
  // Elbow rotation
  P_[4] = 0.001;
  D_[4] = 0;
  Pid_factor_[4] = 1;
  ref_init_[4] = 0;
  desired_position_[4] = 30;
  ref_slope_[4] = 1;
  ref_type_[4] = 1;

  // Wrist 
  P_[5] = 0.0005;
  D_[5] = 0;
  Pid_factor_[5] = 1;

  ref_init_[5] = 0;
  desired_position_[5] = 30;
  ref_slope_[5] = 1;
  ref_type_[5] = 2;

  for(unsigned int i=0;i<16;i++)
    {
      apply_controls_[i] = false;
      user_controls_[i] = 0.0;
      controls_[i]=0.0;
      simulated_controls_[i] =0.0;
    }

  InitSharedMemory();
}


Controller::~Controller()
{
}

void Controller::SetJointNum(unsigned int i)
{
  JOINT_NUM_[i] = true;
  ODEBUG("Setting Joint NUm :" << i);
}

void Controller::SetControllerType(int i)
{
  CONTROLLER_TYPE_ = i;
}

void Controller::ApplyControlLaw()
{
  RTIME   now, TASK_PERIOD = 5e6;//1000000; ..present,
  rt_task_set_periodic(NULL, TM_NOW, rt_timer_ns2ticks(TASK_PERIOD));
  unsigned int loop = 0;
  unsigned int filter_loop =0;
  double velocity1 = 0, velocity2 = 0, acceleration = 0;
  double u_pres[2] = {0, 0};
  /*Plant Model object created*/
 
  if(Joint2modelp!=0)
      ODEBUGL("Pneumatic model object is created",4);
  //Joint2modelp -> setProblemDimension(2);
  /*Joint2modelp -> setParameters(j3lo, 
                                j3alphao, 
                                j3k, 
                                j3ro, 
                                j3R, 
                                j3m,
                                j3link_l, 
                                j3fv) ;*/
  Joint2modelp -> setParameters(j2lo, 
                                j2alphao, 
                                j2k, 
                                j2ro, 
                                j2R, 
                                j2m,
                                j2link_l, 
                                j2fv,
                                j2Pmax) ;

 //PressureModel *pmodel = new PressureModel();
  if(pmodel!=0)
      ODEBUGL("Pressure model object is created",4);
  //pmodel -> setProblemDimension(2);
  pmodel -> setParameters();
  sim_pmodel -> setParameters();

  //model -> server_start();
  double integrator_timestep = 0.005;
  double time_step = TASK_PERIOD/1e9;
  vector<double> previous_state, newstate,  u;
             
        
  //int control_len = 0, control_size, state_len = 0, states_size;
  u.resize(2);
  previous_state.resize(2);
  newstate.resize(2);
  //states_size = previous_state.size();
 /* Variables used in Timer*/
  double t, present_time, previous_time ;
 /* time_t now , previous;
  struct timespec spec;
  clock_gettime(CLOCK_REALTIME, &spec);
  now  = spec.tv_sec;
  present_time = (spec.tv_nsec / 1.0e9);*/
  now = rt_timer_read();
  present_time = (double)now/1.0e9;
  previous_time = present_time;
    
  for(unsigned int i=0; i <7; i++)
    {
      unsigned index1 = 16;
      positions_[i] = shmaddr_[index1++];
      ref_init_[i] = 0;   //positions_[i];
       
     
     loop_reference_traj_[i] = 0;
    }
    Joint2modelp -> Set_StateVector(0*positions_[3]*3.14/180, 0);
    Joint2modelp -> Set_StateVector(3.0e5, 4);
    Joint2modelp -> Set_StateVector(0e5, 2);
    cout << "init pos: " <<Joint2modelp ->Get_StateVector(0) << endl;
    pmodel -> Set_StateVector(0.67,0); 
    pmodel -> Set_StateVector(0,1); 
    pmodel -> Set_StateVector(4.0,2); 
    pmodel -> Set_StateVector(0,3);
    sim_pmodel -> Set_StateVector(0.0,0); 
    sim_pmodel -> Set_StateVector(0,1); 
    sim_pmodel -> Set_StateVector(4.0,2); 
    sim_pmodel -> Set_StateVector(0,3);

    simulated_positions_[3] = (Joint2modelp -> Get_StateVector(0))*180/3.14;
    previous_state[0] = simulated_positions_[3];
    previous_state[1] = 0;
    newstate[0] = previous_state[0];
    newstate[1] = 0;
    u[0] = 0.0;///;  //shmaddr_[6];  //Joint2modelp -> Get_ControlVector(0);  //shmaddr_[6];
    u[1] = 3.0e5;  //shmaddr_[7];  //Joint2modelp -> Get_ControlVector(1); //shmaddr_[7];
    simulated_initconfig_controls_[2] = 0.0; 
    simulated_initconfig_controls_[3] = 0.0; 
    for (unsigned int i =0; i<2; i++)
          Joint2modelp -> Set_ControlVector(u[i], i);
    /*for (unsigned int i =0; i<2; i++)
          Joint2modelp -> Set_StateVector(0, i);*/
  
    //for (unsigned int i =2; i<4; i++)
    //      Joint2modelp -> Set_StateVector(2.5, i);;
  while(1)
    {
      // Waiting the next iteration
      rt_task_wait_period(NULL);      

      shm_sem_.Acquire();
      unsigned int index =16;
      for(unsigned int i=0;i<7;i++)
      {
        positions_[i] = shmaddr_[index++];
        
        ref_final_[i] = GetDesiredPosition(i);
      }
      shm_sem_.Release();
      ODEBUGL("DEbug Before referencegen" << position_store_[0], 0);
      double js2 = Joint2modelp -> Get_StateVector(0);
      //cout << "POSITION[1] = " <<js2  << endl;
      sim_pmodel -> Set_PositionFeedback(positions_[3]*3.14/180);
      pmodel -> Set_PositionFeedback(positions_[3]*3.14/180);

      //pmodel -> Set_PositionFeedback(Joint2modelp -> Get_StateVector(0));
      //sim_pmodel -> Set_PositionFeedback(Joint2modelp -> Get_StateVector(0));
      
      if(filter_loop <=2)
      {
          position_store_[2] = position_store_[1];
          position_store_[1] = position_store_[0];

          filter_loop++;
      }
      if(filter_loop ==3)
          filter_loop = 0;
      position_store_[0] = positions_[3]*3.14/180;
      

      velocity1 = (position_store_[1] - position_store_[2])/time_step;
      velocity2 = (position_store_[0] - position_store_[1])/time_step;

      acceleration = (velocity2 - velocity1)/time_step;
      xstate_[0] = position_store_[0];
      xstate_[1] = velocity2;
      //xstate_[
      velocity_[3] = velocity2;
      acceleration_[3] = acceleration;
      xstate_[2] = acceleration;
      
      //ReferenceGenerator(loop*TASK_PERIOD/1.0e9);
      // ODEBUGL("After Refgen", 1);
      ComputeControlLaw(TASK_PERIOD);

     /* u[0] = simulated_controls_[6] ;
      u[1] = simulated_controls_[7];
      //cout << "sim_Pmodel output:" <<u[0];
      for (unsigned int i =0; i<2; i++)
          Joint2modelp -> Set_ControlVector(u[i], i);
      ODEBUGL("DEbug after set_Controlvector", 4);*/
      /*u_pres[0] = initconfig_controls_[6] + mpc_u;
      u_pres[1] = initconfig_controls_[7] - mpc_u;
      for (unsigned int i =0; i<2; i++)
          pmodel -> Set_ControlVector(u_pres[i], i);*/
       
     /* clock_gettime(CLOCK_REALTIME, &spec);
      now  = spec.tv_sec;
      present_time = (spec.tv_nsec / 1.0e9); */
      now = rt_timer_read();
      present_time = (double)now/1.0e9;
      t = present_time - previous_time;
      /* Ste*/

      //Joint2modelp -> integrateRK4(t, integrator_timestep);
      simulated_positions_[3] = (Joint2modelp -> Get_StateVector(0));
      ODEBUGL("DEbug after integrator" << simulated_positions_[3] , 1);
      previous_time = present_time;
     /* pmodel -> integrateRK4(t, integrator_timestep);
      controls_[6] = pmodel -> Get_StateVector(0);
      controls_[7] = pmodel -> Get_StateVector(2);
      if(controls_[7] >=4.0)
          controls_[7] = 4.0;
      else if (controls_[7] <= 0.0)
          controls_[7] = 0.0;
      if(controls_[6] >=3.75)
          controls_[6] = 3.75;
      else if (controls_[6] <= 0.0)
          controls_[6] = 0.0;a*/

      
      
      for (unsigned int i=0; i<2; i++)
          previous_state[i] = newstate[i];

      // ODEBUGL("After Control Law" , 1);
      shm_sem_.Acquire();
      for(unsigned int i=0;i<16;i++)
	shmaddr_[i] = controls_[i];
      shmaddr_[24] =  Joint2modelp -> Get_PmeanRef() ;//state_mpc_[2]*1e-5;
      //shmaddr_[24] = ref_traj_[1]*PI/180; //velocity_[3];
      //shmaddr_[21] = acceleration_[3];
      //shmaddr_[24] = mpc_controller.GetState()*180/3.14;
      //shmaddr_[23] = (int)( Joint2modelp -> Get_StateVector(0)) *180/3.14;  //newstate[0]*180/3.14;
      shm_sem_.Release();
      loop++;
    }
}

void Controller::ComputeControlLaw(long double timestep)
{
   double u_pres[2] = {0,0};  
    if (CONTROLLER_TYPE_== 3)
    {
      for (unsigned int i=0;i<16;i++)
	{
	  if (reset_control_ ==false)
          {
              if (controls_[i] <= initconfig_controls_[i])
              {
                  controls_[i] += 0.001;
              }
              if (controls_[i] > initconfig_controls_[i]+0.001)
              {
                  controls_[i] -=0.001;
              }

              
              simulated_controls_[i] = simulated_initconfig_controls_[i];
          }
          else 
          {
              controls_[i] = 0.0;
              simulated_controls_[i] = 0.0;
          }
	}
    }
  if(CONTROLLER_TYPE_== 1)
    {
      for (unsigned int i=0;i<16;i++)
	{
	  if (apply_controls_[i] ==true && reset_control_ ==false)
          {
              controls_[i] = user_controls_[i];
              simulated_controls_[i] = user_controls_[i];
          }
	  else 
          {
              controls_[i] = 0.0;//initconfig_controls_[i];
              simulated_controls_[i] = 0.0;
          }
	}
        controls_[10] = initconfig_controls_[10] ;//+ 1.8;   // Step input open loop
        controls_[11] = initconfig_controls_[11] ;//- 1.8;
    }
  if (CONTROLLER_TYPE_ == 2)
    {
      //ODEBUGL("Inside Pid control: " << JOINT_NUM_[3], 1);
      // JOINT_NUM_[3] = tru= true && end_of_loop_ == false)
   double wn = 0.2;
      double delc = 1*( (sin((double)(loop_reference_traj_[3]*timestep*2*PI*wn/1.0e9))) );/*+ 
                          (sin((double)(loop_reference_traj_[3]*timestep*2*PI*(wn*0.5)/1.0e9)))+ 
                          (sin((double)(loop_reference_traj_[3]*timestep*2*PI*(wn*0.25)/1.0e9)))+
                          (sin((double)(loop_reference_traj_[3]*timestep*2*PI*(wn*1.5)/1.0e9)))+
                          (sin((double)(loop_reference_traj_[3]*timestep*2*PI*(wn*1.75)/1.0e9))) );*/
      double tim = loop_reference_traj_[3]*timestep/1.0e9;
      double delc1;
      double step_time = 1.5;
      double step_amp = 0.1;
      bool exit = false;
      int lp  = (int)(tim/step_time);
      delc1 = 3*tim;//step_amp*lp;
      //delc1 = 0.02*(rand()%100); 
      //delc1 = d(gen);
     if(delc1 > 3)
              delc1 = 3;
    double init_pres1 = initconfig_controls_[2] ;
    double init_pres2 = initconfig_controls_[3] ;
    //double Pdes_feedforward;
    double sim_u_pres[2];
    criterror_ = 1e-8;
      for (unsigned int i =0; i<7; i++)
	{
	  if (JOINT_NUM_[i] == true && reset_control_==false)  
	    {
	      /*ReferenceGenerator(loop_reference_traj_[i]*timestep/1.0e9, i,  ref_type_[i]);
	      //ODEBUG("Inside Joint num:" << i );
             //ref_traj_ = ref_final_;
	      error_now_[i] = ref_traj_[i] - positions_[i];
              simulated_error_now_[i] = ref_traj_[i] - simulated_positions_[i];
	      error_derivative_[i] = error_now_[i] - error_prev_[i];
              simulated_error_derivative_[i] = simulated_error_now_[i] - simulated_error_prev_[i];
	      error_prev_[i] = error_now_[i];
              simulated_error_prev_[i]  = simulated_error_now_[i];
              if(abs(error_now_[i]) >= criterror_)
                integrated_error_ = integrated_error_ + 0.005*error_now_[i]*PI/180;

	      ODEBUGL("error_now: " << error_now_[i],3);
	      ODEBUGL("error_prev:" << error_prev_[i],3);
	      // mpc_u = PidController(error_now_[i], error_derivative_[i],i);
              //SimulatedPidController(simulated_error_now_[i], simulated_error_derivative_[i],i);
              
              reference_[0] = ref_traj_[i]*3.14/180;
              reference_[1] = ref_vel_[i]*3.14/180;
              reference_[2] = ref_acl_[i]*3.14/180;
              reference_[3] = ref_jerk_[i]*3.14/180;
              reference_[4] = ref_jerkdot_[i]*3.14/180;
              vector<double> Pdes_feedforward = Joint2modelp ->  InverseModel(reference_);
              //Pdes_feedforward = Pdes_feedforward + 0.6*error_now_[i] + 0.1*integrated_error_;

              //double Pcur =  OpenInverseModel(xstate_);
              //cout << "Pcur: " << Pdes_feedforward;
              reference_mpc_[0] = reference_[0];
              reference_mpc_[1] = reference_[1];
              reference_mpc_[2] = Pdes_feedforward[0]*1e5;
              reference_mpc_[3] = 4.0*1e5 - reference_mpc_[2];

              // Calling MPC controller
              state_mpc_[0] = xstate_[0];
              state_mpc_[1] = xstate_[1];
              //state_mpc_[2] =  (Pdes_feedforward)*1e5; //pmodel->Get_StateVector(0)*1e5; //Pcur*1e5; 
              //state_mpc_[3] = 4e5 - state_mpc_[2]; // pmodel->Get_StateVector(2)*1e5; //4.0*1e5 - Pcur*1e5;
              //cout << "Pes: " << state_mpc_[2]*1e-5 << endl;
              //mpc_u = mpc_controller.GetControl(state_mpc_, reference_mpc_);
              //cout << "mpc_u :" << mpc_u << endl;
              double torquedes = Joint2modelp -> Get_TorqueDes();
              double torque = Joint2modelp -> Get_Torque();
              double thetades = ref_traj_[1]*PI/180;//Joint2modelp -> Get_StateVector(0);
              double poscur = positions_[1]*PI/180;
              double Terror = torquedes - torque;
              double poserror = thetades - poscur;
              if(abs(Terror) >= criterror_)
                integrated_Terror_ = integrated_Terror_ + 0.005*Terror;
              //cout << "Terror: " << poserror << " Int error" << integrated_error_ <<endl;
              //Pdes_feedforward[0] = Pdes_feedforward[0] + 0.8*poserror + 1.5*integrated_error_;

              //Pdes_feedforward = Pdes_feedforward + 3.5*(Terror) + 3.0*integrated_Terror_;
              cout <<" Pdes" << Pdes_feedforward[0] << endl;
              
              u_pres[0] = initconfig_controls_[6] + mpc_u*1e-5; //Pdes_feedforward;
              u_pres[1] = initconfig_controls_[7] - mpc_u*1e-5; //Pdes_feedforward;
              for (unsigned int i =0; i<2; i++)
                  pmodel -> Set_ControlVector(u_pres[i], i);
              //pmodel -> integrateRK4(loop_reference_traj_[i]*timestep/1.0e9, 0.005);
              
              sim_u_pres[0] = 0 + Pdes_feedforward[0]; //*(loop_reference_traj_[i]*timestep/1.0e9); //Pdes_feedforward;
              sim_u_pres[1] =  3 - Pdes_feedforward[0]; //*(loop_reference_traj_[i]*timestep/1.0e9); ; //Pdes_feedforward;

              for (unsigned int i =0; i<2; i++)
                  sim_pmodel -> Set_ControlVector(sim_u_pres[i], i);
              sim_pmodel -> integrateRK4(loop_reference_traj_[i]*timestep/1.0e9, 0.005);
              simulated_controls_[2*i] = sim_pmodel -> Get_StateVector(0);
              simulated_controls_[2*i+1] = sim_pmodel -> Get_StateVector(2);
              //cout << "sim_cont" << simulated_controls_[2*i] << endl;
              //if(Pdes_feedforward <=  initconfig_controls_[6] )
              //{
              */
              if(loop_reference_traj_[i] < sz)
              {
                 // if(uhat2[loop_reference_traj_[3]] > initconfig_controls_[6])
                 // {
                    controls_[6] = uhat2[loop_reference_traj_[3]] + initconfig_controls_[6 ] + 0.1*(xtraj_des2[loop_reference_traj_[3]] - positions_[3]*3.14/180);  
                    controls_[7] = 5- controls_[6]; 
                 // }
                  /*else
                  {
                      controls_[6] = uhat2[loop_reference_traj_[3]] ; //+ initconfig_controls_[6];  
                      controls_[7] = 5 - controls_[6]; //uhat2[loop_reference_traj_[3]]; 
                  }*/

                 //if(uhat1[loop_reference_traj_[3]] > initconfig_controls_[2])
                 // {
                    controls_[2] = uhat1[loop_reference_traj_[3]] + initconfig_controls_[2 ] + 0.1*(xtraj_des1[loop_reference_traj_[3]] - positions_[1]*3.14/180);  
                    controls_[3] = 4 - uhat1[loop_reference_traj_[3]]; 
                 // }
                 /* else
                  {
                      controls_[2] = uhat1[loop_reference_traj_[3]] + initconfig_controls_[2];  
                      controls_[3] = 4 - uhat1[loop_reference_traj_[3]]; 
                  }*/
 
                  
              
             }
              else
              {
                  controls_[6] = uhat2[sz-1] + initconfig_controls_[6 ];  
                  controls_[7] = 5 - uhat2[sz -1]; 
                  
                  controls_[2] = uhat1[sz-1] + initconfig_controls_[2 ];  
                  controls_[3] = 4 - uhat1[sz-1]; 

              }
            
              if(loop_reference_traj_[i] == sz-20)
              {
                  controls_[14] = 0;
                 // controls_[7] = uhat4[loop_reference_traj_[3]]; 
                 controls_[15] =  5;
              
             }
             //controls_[2*i] = 2.5 - 0.3;  
             //controls_[2*i+1] = 2 + 0.3; 
              loop_reference_traj_[i]++;
              cout << "loop: "  << uhat2[loop_reference_traj_[3]] << endl;        /*
             Joint2modelp -> Set_ControlVector(sim_u_pres[0]*1e5, 0);
             Joint2modelp -> Set_ControlVector(sim_u_pres[1]*1e5, 1);
            
             
             Joint2modelp -> integrateRK4(loop_reference_traj_[i]*timestep/1.0e9, 0.005);
            */
             if(controls_[2*i +1] >=5.0)
                  controls_[2*i +1] = 5.0;
             else if (controls_[2*i+1] <= 0.0)
                  controls_[2*i+1] = 0.0;
              
             if(controls_[2*i] >=5.0)
                  controls_[2*i] = 5.0;
             else if (controls_[2*i] <= 0.0)
                  controls_[2*i] = 0.0;
             
             
	      ODEBUGL(" loop_traj" << loop_reference_traj_[i] << "\n",0);
	    }
	  else
	    {
	      controls_[2*i] = initconfig_controls_[2*i];
	      controls_[2*i+1] = initconfig_controls_[2*i+1];
              simulated_controls_[2*i] = simulated_initconfig_controls_[2*i];
	      simulated_controls_[2*i+1] = simulated_initconfig_controls_[2*i+1];

	    }
	}
         
    }


}
/*double Integrator(double t, double error, double h)
{
    double st1, st2, st3, st4, integrated_Error;
    error_temp = error;
    st1 = error;
    integrated_Error = error_temp + 0.5*h*st1;
    st2 = error;
    integrated_Error = error_temp + 0.5*h*st2;
    st3 = error;
    integrated_Error = error_temp + h*st3;
    st4 = error;
    integrated_Error = error_temp + ( (1/6.0) * h * (st1 + 2.0*st2 + 2.0*st3 + st4) );

}*/
void Controller::ResetControl(bool idx)
{
  reset_control_ = idx;
}

double Controller::PidController(double error, double error_derivative, int joint_num)
{
  double update_delta;
  //  double error_acceptable_ = 1;
 // if (error >= error_acceptable_ || error <= -error_acceptable_)
 if(true)
    {
      update_delta =  Pid_factor_[joint_num]*(P_[joint_num]*error + D_[joint_num]*error_derivative);
      delta[joint_num] = delta[joint_num]+update_delta;
    }
   
  /*double control_limit_agonistic =  initconfig_controls_[2*joint_num]+ delta[joint_num];
  double control_limit_antagonistic = initconfig_controls_[2*joint_num+1] - delta[joint_num];


  if (control_limit_agonistic  <=4.5 && control_limit_agonistic >=0)
    { controls_[2*joint_num]= control_limit_agonistic;}
  else
    {
      if (control_limit_agonistic < 0.0)  
        controls_[2*joint_num] = 0.0;
      else 
	if (control_limit_agonistic > 4.5) 
	  controls_[2*joint_num] = 4.5;
    }

  if (control_limit_antagonistic <= 4.5 && control_limit_antagonistic >=  0.0)
    controls_[2*joint_num + 1] = control_limit_antagonistic;
  else
    {
      if (control_limit_antagonistic <0.0) controls_[2*joint_num +1] = 0.0;
      else if (control_limit_antagonistic >4.5) controls_[2*joint_num+1] = 4.5;
    }
     

  // controls_[2*joint_num] = MeanPressure(joint_num)+ delta[joint_num];
  // controls_[2*joint_num+1] = MeanPressure(joint_num) - (delta[joint_num]);
   
  ODEBUGL("Update delta:     " <<update_delta, 4);
  ODEBUGL("Pid command : " << delta[joint_num],4);*/
  return(delta[joint_num]);

}

void Controller::SimulatedPidController(double error, double error_derivative, int joint_num)
{
  double simulated_update_delta;
  //  double error_acceptable_ = 1;
 // if (error >= error_acceptable_ || error <= -error_acceptable_)
 if(true)
    {
      simulated_update_delta =  Pid_factor_[joint_num]*(P_[joint_num]*error + D_[joint_num]*error_derivative);
      simulated_delta_[joint_num] = simulated_delta_[joint_num] + simulated_update_delta;
    }
   
  double simulated_control_limit_agonistic =  simulated_initconfig_controls_[2*joint_num] + 1.5; //simulated_delta_[joint_num];
  double simulated_control_limit_antagonistic = simulated_initconfig_controls_[2*joint_num +1] - 1.5;//simulated_delta_[joint_num];


  /*if (control_limit_agonistic  <=4.5 && control_limit_agonistic >=0)
    { controls_[2*joint_num]= control_limit_agonistic;}
  else
    {
      if (control_limit_agonistic < 0.0)  
        controls_[2*joint_num] = 0.0;
      else 
	if (control_limit_agonistic > 4.5) 
	  controls_[2*joint_num] = 4.5;
    }

  if (control_limit_antagonistic <= 4.5 && control_limit_antagonistic >=  0.0)
    controls_[2*joint_num + 1] = control_limit_antagonistic;
  else
    {
      if (control_limit_antagonistic <0.0) controls_[2*joint_num +1] = 0.0;
      else if (control_limit_antagonistic >4.5) controls_[2*joint_num+1] = 4.5;
    }*/
     

  simulated_controls_[2*joint_num] = 3.5 ;//controls_[6] - initconfig_controls_[6]; //simulated_control_limit_agonistic;
  simulated_controls_[2*joint_num+1] = 3.5 ;//controls_[7] -initconfig_controls_[7]; //simulated_control_limit_antagonistic;
   
  ODEBUGL("Simulated Update delta:     " <<simulated_update_delta, 4);
  ODEBUGL("Simulated Pid command : " << delta[joint_num],4);
}



double Controller::MeanPressure(int i)
{
  //mean_pressure_[i] = initconfig_controls_[i];
  return(mean_pressure_[i]);
}

void Controller::ReferenceGenerator(long double timestep, unsigned int joint_num, unsigned int type)
{
  if (type == 0)
  {

     if (timestep <= 4.0)
     {
        ref_traj_[joint_num] = ref_init_[joint_num] + ref_slope_[joint_num]*(double)timestep;
        ref_vel_[joint_num] = ref_slope_[joint_num];
                
        ref_final_[joint_num] = ref_init_[joint_num] + ref_slope_[joint_num]*4.0;


     }
    
     if (timestep <= 20.0 && timestep > 4.0)
     {
        ref_traj_[joint_num] = ref_final_[joint_num];
        ref_vel_[joint_num] = 0;
        ref_acl_[joint_num] = 0;

     }

     if (timestep <= 24.0 && timestep > 20.0) 
     {
        ref_traj_[joint_num] = ref_final_[joint_num] - ref_slope_[joint_num]*((double)timestep - 20.0);
        ref_vel_[joint_num] = -ref_slope_[joint_num];
        ref_acl_[joint_num] = 0;

     }

     if (timestep > 24.0)
     {
        ref_traj_[joint_num] = 0;
        ref_vel_[joint_num] = 0;
        ref_acl_[joint_num] = 0;

     }
     ref_acl_[joint_num] = 0;
     ref_jerk_[joint_num] = 0.0;
     ref_jerkdot_[joint_num] = 0.0;

   /* if(ref_init_[joint_num] <= ref_final_[joint_num])
    {
      if(ref_traj_[joint_num] >= ref_final_[joint_num])
      {
	ref_traj_[joint_num] = ref_final_[joint_num];
        ref_vel_[joint_num] = 0;
        ref_acl_[joint_num] = 0;
      }
      else
      { ref_traj_[joint_num] = ref_init_[joint_num] + ref_slope_[joint_num]*(double)timestep;
        ref_vel_[joint_num] = ref_slope_[joint_num];
        ref_acl_[joint_num] = 0;
      }
    }
  if(ref_init_[joint_num] >  ref_final_[joint_num])
    {
      if(ref_traj_[joint_num] <= ref_final_[joint_num])
      {
	ref_traj_[joint_num] = ref_final_[joint_num];
        ref_vel_[joint_num] = 0;
        ref_acl_[joint_num] = 0;
      }
      else
      {
        ref_traj_[joint_num] = ref_init_[joint_num] - ref_slope_[joint_num]*(double)timestep;
        ref_vel_[joint_num] = -ref_slope_[joint_num]; 
        ref_acl_[joint_num] = 0;
      }
    }*/
  }
  
  if (type == 1)
  {
      //SetStepResponse();
      ref_traj_[joint_num] = desired_position_[joint_num];
  }

  if (type == 2)
  {
      if (joint_num == 1)
      {
        double f = 2*PI*0.1;
        ref_traj_[joint_num] = 20+20*(sin((double)timestep*f ));
        ref_vel_[joint_num] = f*20*(cos((double)timestep*f));
        ref_acl_[joint_num] = -f*f *20*(sin((double)timestep*f ));
        ref_jerk_[joint_num] = -f*f*f *20*(cos((double)timestep*f ));
        ref_jerkdot_[joint_num] = f*f*f*f *20*(sin((double)timestep*f ));


      }
      else 
        ref_traj_[joint_num] = 20* sin((double)timestep*2*PI/10);
  }


 ODEBUGL("Ref_traj_ : "<< ref_traj_[joint_num], 1); 
}

double Controller::GetDesiredPosition(unsigned int idx)
{
  return(desired_position_[idx]);
}

void Controller::SetUserControl(unsigned int idx, double control)
{
  user_controls_[idx] = control;
  initconfig_controls_[idx] = control;
}

double Controller::GetUserControl(unsigned int idx)
{
  return user_controls_[idx];
}

void Controller::SetApplyControl(unsigned int idx, bool apply_control)
{
  apply_controls_[idx] = apply_control;
}

bool Controller::GetApplyControl(unsigned int idx)
{
  return apply_controls_[idx];
}

void Controller::StartingRealTimeThread()
{
  unsigned n=0;
  n = rt_task_create(&principal_task_, "Principale Controller Function", 0, 99, 0);
  if (n!=0)
    {
      std::cerr << "Failed @ RT Create" << n << std::endl;
    }
  else 
    { ODEBUGL("END of RT Create",3); }

  n = rt_task_start(&principal_task_, principale_controller_function, this);
  if (n!=0)
    {
      std::cerr<< "Failed of RT STart" <<n<< std::endl;
    }
  else 
    { ODEBUGL("END of RT Start",3); }

}

void Controller::InitSharedMemory()
{
  // Update and/or create the file.
  std::ofstream aof;
  aof.open(SHM_LOG_FILENAME,
           std::ofstream::out | std::ofstream::app);
  struct timeval current_time;
  gettimeofday(&current_time,0);
    
  aof << "Starting control " 
      << current_time.tv_sec << "." 
      << current_time.tv_usec << std::endl;
  aof.close();
  
  // Attached the shared memory to a memory segment.
  shmaddr_ = CreateSharedMemoryForPneumaticArm(false);

}

void Controller::CloseSharedMemory()
{
  shmdt(shmaddr_);

  // Update the file.
  std::ofstream aof;
  aof.open(SHM_LOG_FILENAME,
           std::ofstream::out | std::ofstream::app);
  struct timeval current_time;
  gettimeofday(&current_time,0);
    
  aof << " Stop control at " 
      << current_time.tv_sec << "." 
      << current_time.tv_usec << std::endl;
  aof.close();

}


double Controller::GetErrorNow(unsigned int idx)
{
  return error_now_[idx];
}

double Controller::GetErrorDerivative(unsigned int idx)
{
  return error_derivative_[idx];
}

double Controller::GetUpdateDelta(unsigned int idx)
{
    return(P_[idx]*error_now_[idx]);
}

bool Controller::GetJointNum(unsigned int idx)
{
    return(JOINT_NUM_[idx]);
}

